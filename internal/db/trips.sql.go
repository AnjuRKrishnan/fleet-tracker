// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trips.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTripByID = `-- name: GetTripByID :one
SELECT id, vehicle_id, start_time, end_time, mileage, avg_speed
FROM trips
WHERE id = $1
`

func (q *Queries) GetTripByID(ctx context.Context, id pgtype.UUID) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripByID, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.VehicleID,
		&i.StartTime,
		&i.EndTime,
		&i.Mileage,
		&i.AvgSpeed,
	)
	return i, err
}

const getTripsLast24Hours = `-- name: GetTripsLast24Hours :many
SELECT id, vehicle_id, start_time, end_time, mileage, avg_speed
FROM trips
WHERE vehicle_id = $1
  AND start_time >= now() - interval '24 hours'
ORDER BY start_time DESC
`

func (q *Queries) GetTripsLast24Hours(ctx context.Context, vehicleID pgtype.UUID) ([]Trip, error) {
	rows, err := q.db.Query(ctx, getTripsLast24Hours, vehicleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.VehicleID,
			&i.StartTime,
			&i.EndTime,
			&i.Mileage,
			&i.AvgSpeed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTrip = `-- name: InsertTrip :exec
INSERT INTO trips (id, vehicle_id, start_time, end_time, mileage, avg_speed)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertTripParams struct {
	ID        pgtype.UUID        `json:"id"`
	VehicleID pgtype.UUID        `json:"vehicle_id"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
	Mileage   pgtype.Float8      `json:"mileage"`
	AvgSpeed  pgtype.Float8      `json:"avg_speed"`
}

func (q *Queries) InsertTrip(ctx context.Context, arg InsertTripParams) error {
	_, err := q.db.Exec(ctx, insertTrip,
		arg.ID,
		arg.VehicleID,
		arg.StartTime,
		arg.EndTime,
		arg.Mileage,
		arg.AvgSpeed,
	)
	return err
}

const listTripsByVehicle = `-- name: ListTripsByVehicle :many
SELECT id, vehicle_id, start_time, end_time, mileage, avg_speed
FROM trips
WHERE vehicle_id = $1
AND start_time = $2 
ORDER BY start_time DESC
`

type ListTripsByVehicleParams struct {
	VehicleID pgtype.UUID        `json:"vehicle_id"`
	StartTime pgtype.Timestamptz `json:"start_time"`
}

func (q *Queries) ListTripsByVehicle(ctx context.Context, arg ListTripsByVehicleParams) ([]Trip, error) {
	rows, err := q.db.Query(ctx, listTripsByVehicle, arg.VehicleID, arg.StartTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.VehicleID,
			&i.StartTime,
			&i.EndTime,
			&i.Mileage,
			&i.AvgSpeed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
