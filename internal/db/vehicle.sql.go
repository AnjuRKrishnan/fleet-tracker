// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: vehicle.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVehicle = `-- name: CreateVehicle :one
INSERT INTO vehicle (id, plate_number, last_status)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO UPDATE
SET last_status = EXCLUDED.last_status
RETURNING id, plate_number, last_status
`

type CreateVehicleParams struct {
	ID          pgtype.UUID `json:"id"`
	PlateNumber string      `json:"plate_number"`
	LastStatus  string      `json:"last_status"`
}

func (q *Queries) CreateVehicle(ctx context.Context, arg CreateVehicleParams) (Vehicle, error) {
	row := q.db.QueryRow(ctx, createVehicle, arg.ID, arg.PlateNumber, arg.LastStatus)
	var i Vehicle
	err := row.Scan(&i.ID, &i.PlateNumber, &i.LastStatus)
	return i, err
}

const getVehicleByPlate = `-- name: GetVehicleByPlate :one
SELECT id, plate_number, last_status
FROM vehicle
WHERE plate_number = $1
`

func (q *Queries) GetVehicleByPlate(ctx context.Context, plateNumber string) (Vehicle, error) {
	row := q.db.QueryRow(ctx, getVehicleByPlate, plateNumber)
	var i Vehicle
	err := row.Scan(&i.ID, &i.PlateNumber, &i.LastStatus)
	return i, err
}

const getVehicleStatus = `-- name: GetVehicleStatus :one
SELECT last_status
FROM vehicle
WHERE id = $1
`

func (q *Queries) GetVehicleStatus(ctx context.Context, id pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getVehicleStatus, id)
	var last_status string
	err := row.Scan(&last_status)
	return last_status, err
}

const listVehicles = `-- name: ListVehicles :many
SELECT id, plate_number, last_status
FROM vehicle
ORDER BY ID DESC
LIMIT $1 OFFSET $2
`

type ListVehiclesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVehicles(ctx context.Context, arg ListVehiclesParams) ([]Vehicle, error) {
	rows, err := q.db.Query(ctx, listVehicles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vehicle
	for rows.Next() {
		var i Vehicle
		if err := rows.Scan(&i.ID, &i.PlateNumber, &i.LastStatus); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertVehicleStatus = `-- name: UpsertVehicleStatus :exec
INSERT INTO vehicle (id, plate_number, last_status)
VALUES ($1, $2, $3::JSONB)
ON CONFLICT (id) DO UPDATE
SET plate_number = EXCLUDED.plate_number,
    last_status  = EXCLUDED.last_status
`

type UpsertVehicleStatusParams struct {
	ID          pgtype.UUID `json:"id"`
	PlateNumber string      `json:"plate_number"`
	Column3     string      `json:"column_3"`
}

func (q *Queries) UpsertVehicleStatus(ctx context.Context, arg UpsertVehicleStatusParams) error {
	_, err := q.db.Exec(ctx, upsertVehicleStatus, arg.ID, arg.PlateNumber, arg.Column3)
	return err
}
